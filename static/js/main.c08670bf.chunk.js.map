{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["url","name","wrap","arguments","length","undefined","concat","slides","App","_this","this","react_default","a","createElement","className","renderprops_addons","ref","parallax","pages","offset","speed","factor","style","backgroundImage","backgroundSize","backgroundColor","opacity","alt","src","display","width","marginLeft","href","build_default","autoplay","enableKeyboard","useDotIndex","slideInterval","defaultIndex","effect","height","React","Component","Boolean","window","location","hostname","match","library","add","faGithub","faLinkedin","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c08670bf.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {Parallax, ParallaxLayer} from 'react-spring/renderprops-addons';\nimport Slideshow from \"react-slidez\";\n\nconst url = (name, wrap = false) => `${wrap ? 'url(' : ''}https://awv3node-homepage.surge.sh/build/assets/${name}.svg${wrap ? ')' : ''}`;\n\nconst slides = [\"./img/1.png\", \"./img/2.png\", \"./img/3.png\", \"./img/4.png\", \"./img/5.png\", \"./img/6.png\", \"./img/7.png\", \"./img/8.png\"];\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n         <Parallax ref={ref => (this.parallax = ref)} pages={2}>\n         <ParallaxLayer offset={0} speed={0} factor={3} style={{ backgroundImage: url('stars', true), backgroundSize: 'cover', backgroundColor: \"#87BCDE\" }} />\n         <ParallaxLayer offset={0} speed={1} className=\"AboutBackground\" />\n         <ParallaxLayer offset={1} speed={1} className=\"ProjectsBackground\" />\n          <ParallaxLayer offset={0} speed={0.8} style={{ opacity: 1 }}>\n            <img alt=\"cloud\" src={url('cloud')} style={{ display: 'block', width: '20%', marginLeft: '55%' }} />\n            <img alt=\"cloud\" src={url('cloud')} style={{ display: 'block', width: '10%', marginLeft: '15%' }} />\n          </ParallaxLayer>\n          <ParallaxLayer offset={0.5} speed={0.5} style={{ opacity: 1 }}>\n            <img alt=\"cloud\" src={url('cloud')} style={{ display: 'block', width: '15%', marginLeft: '70%' }} />\n            <img alt=\"cloud\" src={url('cloud')} style={{ display: 'block', width: '20%', marginLeft: '20%' }} />\n          </ParallaxLayer>\n          <ParallaxLayer offset={1} speed={0.2} style={{ opacity: 0.5 }}>\n            <img alt=\"cloud\" src={url('cloud')} style={{ display: 'block', width: '10%', marginLeft: '25%' }} />\n            <img alt=\"cloud\" src={url('cloud')} style={{ display: 'block', width: '15%', marginLeft: '70%' }} />\n          </ParallaxLayer>\n          <ParallaxLayer offset={1.5} speed={0.5} style={{ opacity: 0.5 }}>\n            <img alt=\"cloud\" src={url('cloud')} style={{ display: 'block', width: '15%', marginLeft: '45%' }} />\n            <img alt=\"cloud\" src={url('cloud')} style={{ display: 'block', width: '20%', marginLeft: '10%' }} />\n          </ParallaxLayer>\n          <ParallaxLayer offset={0} speed={1} className=\"About\">\n            <div className=\"intro\">Hello, I'm Timi Voutilainen!</div>\n            <div className=\"tagline\">Front-end developer | Mobile Developer | Full-stack developer</div>\n            <div className=\"icons-social\">\n              <a href=\"https://github.com/timivouti\"><i className=\"fab fa-github\"></i></a>\n              <a href=\"https://fi.linkedin.com/in/timi-voutilainen-9b6266161\"><i className=\"fab fa-linkedin\"></i></a>\n            </div>\n          </ParallaxLayer>\n          <ParallaxLayer offset={1} speed={1} className=\"Projects\" style={{ opacity: 0.8 }}>\n            <Slideshow\n              autoplay\n              enableKeyboard\n              useDotIndex\n              slideInterval={2000}\n              defaultIndex={1}\n              slides={slides}\n              effect={'fade'}\n              height={'80%'}\n              width={'50%'}\n            />\n          </ParallaxLayer>\n\n        </Parallax>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faGithub, faLinkedin } from '@fortawesome/free-brands-svg-icons';\n\nlibrary.add(faGithub, faLinkedin);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}